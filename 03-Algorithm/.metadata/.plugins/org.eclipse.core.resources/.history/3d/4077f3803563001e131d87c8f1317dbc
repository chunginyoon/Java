import java.io.*;
import java.util.*;

public class SWEA_1249_보급로_윤정인 {

	static int[][] map;
	static int[][] distance;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringBuilder sb = new StringBuilder();
		int T = Integer.parseInt(br.readLine());

		for (int tc = 1; tc <= T; tc++) {
			int N = Integer.parseInt(br.readLine());
			map = new int[N][N];
			distance = new int[N][N];

			for (int i = 0; i < N; i++) {
				StringTokenizer st = new StringTokenizer(br.readLine());
				for (int j = 0; j < N; j++)
					map[i][j] = Integer.parseInt(st.nextToken());
			}

			for (int i = 0; i < N; i++)
				for (int j = 0; j < N; j++)
					findDistance(i, j, N);

			sb.append('#' + tc).append(' ' + distance[N - 1][N - 1]).append('\n');
		}
	}

	private static void findDistance(int i, int j, int N) {
		int[][] delta = { { -1, 0 }, { 1, 0 }, { 0, -1 }, { 0, 1 } };

		for (int d = 0; d < 4; d++) {
			int x = i + delta[d][0];
			int y = j + delta[d][1];

			if (x < 0 || x >= N || y < 0 || y >= N)
				continue;

			if (distance[x][y] == 0) {
				distance[x][y] = distance[i][j] + map[x][y];
			}

			else {
				distance[x][y] = Math.min(distance[x][y], distance[i][j] + map[x][y]);
			}
		}
	}
}
