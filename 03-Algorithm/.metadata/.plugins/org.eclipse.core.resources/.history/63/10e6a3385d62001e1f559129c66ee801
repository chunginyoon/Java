package SamsungSW;

/*
 * 벨트는 계속해서 움직이므로 고유 번호가 필요하다. 벨트의 현재 위치(가변적), 내구성을 저장하는 클래스를 생성한다. 배열의 인덱스는 벨트의 고유 번호가 된다.
 * 로봇은 먼저 들어온 순서가 중요하다. 로봇이 새로 생길 때마다 리스트에 추가한다. 로봇 리스트의 값은 벨트 배열의 인덱스 값이 된다
 * 	=> 벨트의 위치가 변해도 로봇이 어떤 벨트 위에 있는지 알 수 있다
 * 로봇이 벨트 위에서 이동할 때, 로봇 리스트의 값은 벨트의 인덱스가 되므로 로봇 리스트의 값+1 => 다음 벨트가 된다
 */
import java.io.*;
import java.util.*;

public class Main_BJ_20055_컨베이어벨트위의로봇 {

	static class Belt {
		int strength;
		boolean robot;

		private Belt(int strength, boolean robot) {
			this.strength = strength;
			this.robot = robot;
		}
	}

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		int N = Integer.parseInt(st.nextToken());
		int K = Integer.parseInt(st.nextToken());

		Belt[] belt = new Belt[2 * N + 1];

		st = new StringTokenizer(br.readLine());

		for (int i = 1; i <= 2 * N; i++)
			belt[i] = new Belt(Integer.parseInt(st.nextToken()), false);

		while (count(belt) < K) {

			// 로봇 회전
			for (int i = 1; i < 2 * N; i++)
				if (belt[i].robot && belt[i + 1].strength > 0 && !belt[i + 1].robot) {
					belt[i + 1].strength--;
					belt[i + 1].robot = true;
					belt[i].robot = false;
				}

			if (belt[2 * N].robot && belt[1].strength > 0 && !belt[1].robot) {
				belt[1].strength--;
				belt[1].robot = true;
				belt[2 * N].robot = false;
			}

			belt[N].robot = false;
		}
	}

	public static int count(Belt[] belt) {
		int cnt = 0;

		for (int i = 1; i < belt.length; i++)
			if (belt[i].strength == 0)
				cnt++;

		return cnt;
	}
}