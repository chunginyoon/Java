
import java.io.*;
import java.util.*;
/*
 * 
 */

public class Main_BJ_말이되고픈원숭이_윤정인 {

	static class Pos {
		int x;
		int y;
		int horseJump;
		int cnt;

		Pos(int x, int y, int horseJump, int cnt) {
			this.x = x;
			this.y = y;
			this.horseJump = horseJump;
			this.cnt = cnt;
		}
	}

	static int[][] map;
	static int W, H;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int K = Integer.parseInt(br.readLine());
		StringTokenizer st = new StringTokenizer(br.readLine());
		W = Integer.parseInt(st.nextToken());
		H = Integer.parseInt(st.nextToken());

		map = new int[H][W];

		for (int i = 0; i < H; i++) {
			st = new StringTokenizer(br.readLine());

			for (int j = 0; j < W; j++)
				map[i][j] = Integer.parseInt(st.nextToken());
		}
	}

	private static void bfs(int i, int j) {

		int[][] delta = { { -1, 0 }, { 1, 0 }, { 0, -1 }, { 0, 1 } };
		int[][] horse = { { -1, -2 }, { -2, -1 }, { -2, 1 }, { -1, 2 }, { 1, -2 }, { 2, -1 }, { 1, 2 }, { 2, 1 } };

		for (int d = 0; d < 12; d++) {
			int r = i + delta[d][0];
			int c = j + delta[d][1];

			if (r >= 0 && r < H && c >= 0 && c < W)
				if (map[r][c] == 0) { // 이동하려는 곳이 경계 내부이면서 장애물이 아닐 때

				}
		}
	}
}
