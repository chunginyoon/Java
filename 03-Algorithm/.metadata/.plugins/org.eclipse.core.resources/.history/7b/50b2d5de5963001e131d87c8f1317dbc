import java.io.*;
import java.util.*;

public class Main_BJ_4485_녹색옷입은애가젤다지_윤정인 {

	static class Vertex {
		int x;
		int y;
		int weight;

		Vertex(int x, int y, int weight) {
			this.x = x;
			this.y = y;
			this.weight = weight;
		}
	}

	static int N;
	static int[][] map;
	static int[][] distance;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringBuilder sb = new StringBuilder();

		int tc = 0;

		while (true) {
			N = Integer.parseInt(br.readLine());

			if (N == 0)
				break;

			tc++;
			map = new int[N][N];

			for (int i = 0; i < N; i++) {
				StringTokenizer st = new StringTokenizer(br.readLine());
				for (int j = 0; j < N; j++)
					map[i][j] = Integer.parseInt(st.nextToken());
			}

			findRoute();
			sb.append("Problem ").append(tc + ": ").append(distance[N - 1][N - 1]).append('\n');
		}

		System.out.print(sb);
	}

	private static void findRoute() {

		distance = new int[N][N];
		boolean[][] visited = new boolean[N][N];
		int[] dr = { -1, 1, 0, 0 };
		int[] dc = { 0, 0, -1, 1 };
		PriorityQueue<Vertex> pq = new PriorityQueue<>((x, y) -> x.weight - y.weight);

		for (int i = 0; i < N; i++)
			Arrays.fill(distance[i], Integer.MAX_VALUE);
		distance[0][0] = map[0][0];

		pq.offer(new Vertex(0, 0, 0));

		while (!pq.isEmpty()) {

			Vertex v = pq.poll();

			int r = v.x;
			int c = v.y;

			if (visited[r][c])
				continue;

			if (r == N - 1 && c == N - 1)
				break;

			visited[r][c] = true;

			for (int d = 0; d < 4; d++) {
				int nr = r + dr[d];
				int nc = c + dc[d];

				if (nr < 0 || nr >= N || nc < 0 || nc >= N)
					continue;

				if (visited[nr][nc])
					continue;

				if (distance[nr][nc] <= distance[r][c] + map[nr][nc])
					continue;

				distance[nr][nc] = distance[r][c] + map[nr][nc];
				pq.offer(new Vertex(nr, nc, distance[nr][nc]));
			}
		}
	}
}