
import java.io.*;
import java.util.*;

public class Main_BJ_말이되고픈원숭이_윤정인 {

	static int[][] map;
	static int[][] dp;
	static int W, H;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int K = Integer.parseInt(br.readLine());
		StringTokenizer st = new StringTokenizer(br.readLine());
		W = Integer.parseInt(st.nextToken());
		H = Integer.parseInt(st.nextToken());

		map = new int[H][W];
		dp = new int[H][W];

		for (int i = 0; i < H; i++) {
			st = new StringTokenizer(br.readLine());

			for (int j = 0; j < W; j++)
				map[i][j] = Integer.parseInt(st.nextToken());
		}

		for (int i = 0; i < H; i++)
			for (int j = 0; j < W; j++)
				setDP(i, j);
	}

	private static void setDP(int i, int j) {

		int[][] delta = { { -1, 0 }, { 1, 0 }, { 0, -1 }, { 0, 1 } ,{ -1, -2 }, { -2, -1 }, { -2, 1 }, { -1, 2 }, { 1, -2 }, { 2, -1 }, { 1, 2 }, { 2, 1 } };

		for (int d = 0; d < 12; d++) {
			int r = i + delta[d][0];
			int c = j + delta[d][1];

			if (r >= 0 && r < H && c >= 0 && c < W)
				if (map[r][c] == 0) {

					if (dp[r][c] == 0) {
						if (r != 0 && c != 0)
							dp[r][c] = dp[i][j] + 1;
					}

					else {
						dp[r][c] = Math.min(dp[r][c], dp[i][j] + 1);
					}
				}
		}
	}
}
